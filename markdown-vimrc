call plug#begin('~/.vim/plugged')
Plug 'sjl/gundo.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } | Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'justinmk/vim-sneak'
Plug 'arzg/vim-colors-xcode'

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }
Plug 'junegunn/vim-easy-align'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-commentary'
Plug 'rstacruz/vim-closer'
Plug 'wellle/targets.vim'
Plug 'vim-pandoc/vim-pandoc-syntax', {'for': 'markdown.pandoc'}
call plug#end()

set backspace=2
set encoding=utf8
set ffs=unix,dos,mac        " use unix as default filetype
set number                  " enable display of line numbers
set cursorline              " show cursor line
set scrolloff=3

set wildmenu
set wildmode=longest:full,full
set ignorecase              " ignore case when searching
set hlsearch                " highlight searches
set noshowmode              " don't show -- INSERT --

let g:loaded_matchparen=1
set laststatus=2
set ttyfast
set lazyredraw
set visualbell

set undofile                " persistent undo
set undolevels=1000
set noswapfile
set nobackup
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//
let g:mapleader=","

set incsearch
set expandtab               " expand tabs into spaces
set smarttab
set shiftwidth=4            " 1 tab == 4 spaces
set tabstop=4
set autoindent
set smartindent
set nofoldenable
set hidden
set splitright
set matchtime=0
set cinkeys-=0#             " don't put line in col 1 when it starts with '#'

set shortmess+=c
set completeopt-=preview
set completeopt+=menu,menuone,noinsert,noselect
set pumheight=25            " Limit height to 25 at max
set clipboard^=unnamedplus
set updatetime=1000

set pastetoggle=<F2>
filetype plugin indent on
syntax on

set background=dark
colo xcodedarkhc

set grepprg=ag\ --nogroup\ --nocolor

set statusline=
set statusline+=%f
set statusline+=\ %m
set statusline+=%=
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ 

set listchars=tab:▸\ ,trail:·
set list

let g:is_bash = 1

" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#max_list = 100
let g:deoplete#num_processes = 1

inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#manual_complete()
" Actually insert a tab
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<C-V><Tab>"

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

function g:Multiple_cursors_before()
    call deoplete#custom#buffer_option('auto_complete', v:false)
endfunction
function g:Multiple_cursors_after()
    call deoplete#custom#buffer_option('auto_complete', v:true)
endfunction

" justinmk/vim-sneak
let g:sneak#label = 1

" sjl/gundo.vim
let g:gundo_right = 1

" mhinz/vim-grepper
let g:grepper = {}
let g:grepper.tools = ['rg', 'ag', 'git', 'grep']
let g:grepper.operator = {}
let g:grepper.operator.side = 1
let g:grepper.operator.prompt = 0

" tabstop, softtabstop, shiftwidth
augroup vimrc
    autocmd!
    autocmd VimEnter * call setreg('q', [])
    autocmd WinEnter * if winnr('$') == 1 && &buftype == "quickfix"|q|endif
    autocmd BufWinEnter '__doc__' setlocal bufhidden=delete
    autocmd Filetype markdown setlocal ts=4 sts=4 sw=4
    autocmd BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc
augroup END

" pandoc
let g:pandoc#syntax#conceal#use = 1
let g:pandoc#syntax#style#use_definition_lists = 0

" key mappings
map <C-a> <Nop>
nnoremap <Leader>d <Esc>:nohl<CR>
nnoremap <F5> <Esc>:bp<bar>bd#<CR>
nnoremap <F6> <Esc>:GundoToggle<CR>

nnoremap <leader>m <Esc>:GitGutterNextHunk<CR>
nnoremap <leader>n <Esc>:GitGutterPrevHunk<CR>
nnoremap <Space> @q

" Use x and X for cut
noremap x d
noremap X D
nnoremap dd "_dd
vnoremap p "_d"+P
vnoremap d "_d
noremap d "_d
noremap D "_D
noremap c "_c
noremap C "_C

" loclist and quickfix
nnoremap <c-j> <Esc>:lprev<CR>
nnoremap <c-k> <Esc>:lnext<CR>

" mhinz/vim-grepper
nmap <leader>ss <Esc>:Grepper -side -cword -noprompt<CR>
xmap <leader>ss <plug>(GrepperOperator)
nnoremap <leader>/ :Grepper<cr>
nnoremap <leader>? :Grepper -side<cr>

" junegunn/vim-easy-align.vim
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

" junegunn/fzf.vim
nnoremap <C-p> <ESC>:FZF<CR>
nnoremap <C-t> <ESC>:Buffers<CR>
nnoremap <C-f> <ESC>:BTags<CR>
nnoremap <C-o> <ESC>:Commands<CR>
nnoremap <C-Space> <ESC>:Tags<CR>

nnoremap <Leader>\| <Esc>:vsplit %<CR>
nnoremap <Leader>- <Esc>:split %<CR>

let g:python_host_prog  = expand('~/.pyenv/versions/neovim2/bin/python')
let g:python3_host_prog = expand('~/.pyenv/versions/neovim3/bin/python')
